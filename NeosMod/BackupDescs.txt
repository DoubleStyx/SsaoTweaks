
        // Mod config registration
        [AutoRegisterConfigKey]
        private static readonly ModConfigurationKey<AmplifyOcclusionBase.ApplicationMethod> KEY_APPLYMETHOD = 
            new ModConfigurationKey<AmplifyOcclusionBase.ApplicationMethod>("Apply Method", "How the occlusion effect should be applied", () => AmplifyOcclusionBase.ApplicationMethod.PostEffect);
        [AutoRegisterConfigKey]
        private static readonly ModConfigurationKey<SampleCountLevel> KEY_SAMPLECOUNT = 
            new ModConfigurationKey<SampleCountLevel>("Sample Count", "Amount of AO samples for occlusion effect", () => SampleCountLevel.Low);

        [AutoRegisterConfigKey]
        private static readonly ModConfigurationKey<bool> KEY_SMOOTHNORMALS = new ModConfigurationKey<bool>("Smooth Normals", "Whether to use smooth normals for occlusion effect", () => false);
        [AutoRegisterConfigKey]
        private static readonly ModConfigurationKey<float> KEY_INTENSITY = new ModConfigurationKey<float>("Intensity", "Linear intensity of occlusion effect", () => 1f);
        [AutoRegisterConfigKey]
        private static readonly ModConfigurationKey<color> KEY_TINT = new ModConfigurationKey<color>("Tint", "Color of occlusion effect", () => new color(0, 0, 0));
        [AutoRegisterConfigKey]
        private static readonly ModConfigurationKey<float> KEY_RADIUS = new ModConfigurationKey<float>("Radius", "Radius of occlusion effect", () => 4f);
        [AutoRegisterConfigKey]
        private static readonly ModConfigurationKey<float> KEY_POWEREXPONENT = new ModConfigurationKey<float>("Power Exponent", "Power exponent value of occlusion effect", () => 0.6f);
        [AutoRegisterConfigKey]
        private static readonly ModConfigurationKey<float> KEY_BIAS = new ModConfigurationKey<float>("Bias", "Occlusion bias", () => 0f);
        [AutoRegisterConfigKey]
        private static readonly ModConfigurationKey<float> KEY_THICKNESS = new ModConfigurationKey<float>("Thickness", "Occlusion thickness heuristic", () => 1f);
        [AutoRegisterConfigKey]
        private static readonly ModConfigurationKey<bool> KEY_DOWNSAMPLE = new ModConfigurationKey<bool>("Downsample", "Whether to compute occlusion at half resolution", () => true);
        [AutoRegisterConfigKey]
        private static readonly ModConfigurationKey<bool> KEY_CACHEAWARE = new ModConfigurationKey<bool>("Cache Aware", "Whether to use optimized occlusion caching", () => true);
        [AutoRegisterConfigKey]
        private static readonly ModConfigurationKey<bool> KEY_BLURENABLED = new ModConfigurationKey<bool>("Blur Enabled", "Whether to apply blur to the occlusion effect to reduce noisy artifacts", () => true);
        [AutoRegisterConfigKey]
        private static readonly ModConfigurationKey<int> KEY_BLURRADIUS = new ModConfigurationKey<int>("Blur Radius", "Radius in pixels of blur pass", () => 4); 
        [AutoRegisterConfigKey]
        private static readonly ModConfigurationKey<int> KEY_BLURPASSES = new ModConfigurationKey<int>("Blur Passes", "Number of times blur is applied", () => 2);
        [AutoRegisterConfigKey]
        private static readonly ModConfigurationKey<float> KEY_BLURSHARPNESS = new ModConfigurationKey<float>("Blur Sharpness", "Sharpness of blur pass", () => 3f);
        [AutoRegisterConfigKey]
        private static readonly ModConfigurationKey<bool> KEY_FILTERENABLED = new ModConfigurationKey<bool>("Filter Enabled", "Whether to apply temporal filter to occlusion effect", () => true);
        [AutoRegisterConfigKey]
        private static readonly ModConfigurationKey<float> KEY_FILTERBLENDING = new ModConfigurationKey<float>("Filter Blending", "Controls accumulation decay of temporal filter", () => 0.25f);
        [AutoRegisterConfigKey]
        private static readonly ModConfigurationKey<float> KEY_FILTERRESPONSE = new ModConfigurationKey<float>("Filter Response", "Controls amount of discarded calculations based on motion for temporal filter", () => 0.9f);